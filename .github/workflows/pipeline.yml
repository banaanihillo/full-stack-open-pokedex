# This is a basic workflow to help you get started with Actions

name: Deployment pipeline

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [main]
  pull_request:
    branches: [main]
    types: [opened, synchronize]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # Run on pushes/pull requests to the main branch,
  # skipped if the commit message includes "#skip"
  # Required for pull requests
  deploy:
    if: |
        github.event_name == 'push'
        && !contains(github.event.commits[0].message, '#skip')
    # Yup, runs on ubuntu 18.04 alright
    runs-on: ubuntu-18.04

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: "12.x"
      - uses: akhileshns/heroku-deploy@v3.12.12
        with:
          heroku_api_key: ${{secrets.HEROKU_API_KEY}}
          heroku_app_name: pokedex-banaanihillo
          heroku_email: banaanihillo@protonmail.ch
          healthcheck: http://pokedex-banaanihillo.herokuapp.com/health
          checkstring: OK
          rollbackonhealthcheckfailed: true

  test:
    runs-on: ubuntu-18.04
    steps:
      - name: Check repository out
        uses: actions/checkout@v2

      - name: Set up node
        uses: actions/setup-node@v1
        with:
          node-version: "12.x"

      - name: npm install
        run: npm install

      - name: lint
        run: npm run eslint
        
      - name: build
        run: npm run build
        
      - name: test
        run: npm run test
      
      - name: Date
        run: date
      
      - name: Directory content
        run: ls -l
      
      - name: End-to-end tests
        uses: cypress-io/github-action@v2
        with:
          command: npm run test:e2e
          start: npm run start-prod
          wait-on: http://localhost:5000
      
      - name: Notify on failure
        if: ${{failure()}}
        uses: appleboy/telegram-action@v0.1.1
        #
        with:
          to: ${{secrets.TELEGRAM_TO}}
          token: ${{secrets.TELEGRAM_TOKEN}}
          message: |
            Test failed on ${{github.event_name}}
            Created at ${{github.event.pull_request.created_at}}
            Updated at ${{github.event.pull_request.updated_at}}

  bump_version_tag:
    if: |
        github.event_name == 'push'
        && !contains(github.event.commits[0].message, '#skip')
    # Yep, still running on ubuntu 18.04
    runs-on: ubuntu-18.04
    steps:
      - name: Check repository out with depth 0
        uses: actions/checkout@v2
        with:
          fetch-depth: '0'
      
      - name: Bump version and push tag
        uses: anothrNick/github-tag-action@1.33.0
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
          DEFAULT_BUMP: patch
          INITIAL_VERSION: '0.0.1'
          RELEASE_BRANCHES: main

  log_skipped_commit:
    if: |
      contains(github.event.commits[0].message, '#skip')
      || contains(github.event.pull_request.title, '#skip')
      || contains(github.event.pull_request.body, '#skip')
    runs-on: ubuntu-18.04
    steps:
      - name: Check the repository out
        uses: actions/checkout@v2
      
      - name: GitHub context
        env:
          GITHUB_CONTEXT: ${{toJson(github)}}
        # That's a double quote
        run: echo "$GITHUB_CONTEXT"
      
      - name: Commits
        env:
          COMMITS: ${{toJson(github.event.commits)}}
        run: echo "$COMMITS"
      
      - name: Commit messages
        env:
          COMMIT_MESSAGES: ${{toJson(github.event.commits.*.message)}}
          # The "commits" property does not exist on pull requests
          COMMIT_TITLE: ${{toJson(github.event.pull_request.title)}}
          COMMIT_BODY: ${{toJson(github.event.pull_request.body)}}
        run: |
          echo "$COMMIT_MESSAGES"
          echo "$COMMIT_TITLE"
          echo "$COMMIT_BODY"
# Go away, red commit deletion thing

